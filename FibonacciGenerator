Generates nth Fibonacci number (up to 10e9) given any f0 and f1


matrix = [[1,1],[1,0]]
zeros = [0]*(31)
zeros[1] = matrix

a1 = matrix[0][0]
a2 = matrix[0][1]
b1 = matrix[1][0]
b2 = matrix[1][1]

for i in range(2, 31):

    print(i)
    matrix = [[(a1*a1 + a2*b1),(a1*a2 + a2*b2)], [(b1*a1 + b2*b1), (b1*a2 + b2*b2)]]

    a1 = matrix[0][0]
    a2 = matrix[0][1]
    b1 = matrix[1][0]
    b2 = matrix[1][1]

    zeros[i] = matrix

def solve(a, b, n):

    matrix = [[1,1],[1,0]]
    initial = [b, a]

    target = matmult(leftHandPower(n),initial)

    return target

def leftHandPower(n):

    binary = bin(n-1)[2:]
    
    length = len(binary)

    I = [[1,0], [0,1]]
    working = I

    for j in range(1, length+1):

        if str(binary)[j-1] == '1':

            index = length-j+1

            a1 = zeros[index][0][0]
            a2 = zeros[index][0][1]
            b1 = zeros[index][1][0]
            b2 = zeros[index][1][1]

            x1 = working[0][0]
            x2 = working[0][1]
            y1 = working[1][0]
            y2 = working[1][1]

            working = [[(x1*a1 + x2*b1), (x1*a2 + x2*b2)], [(y1*a1 + y2*b1), (y1*a2 + y2*b2)]]

    return working

def matmult(m, v):

    a1 = m[0][0]
    a2 = m[0][1]
    b1 = m[1][0]
    b2 = m[1][1]

    x = v[0]
    y = v[1]

    answer = (a1*x + a2*y)
    return answer
